/*
 * SD_Card.c
 *
 *  Created on: 2016Äê11ÔÂ12ÈÕ
 *      Author: lin.zheng
 */

#include <stdio.h>
#include "platform.h"
#include "sleep.h"
#include "xparameters.h"	/* SDK generated parameters */
#include "xsdps.h"		/* SD device driver */
#include "xil_printf.h"
#include "ff.h"
#include "xil_cache.h"
#include "xplatform_info.h"

#include "tdc.h"
#include "SD_Card.h"
#include "GPS.h"
#include "lidar_sys.h"

/*****************************************************************************/
/**
*
* File system example using SD driver to write to and read from an SD card
* in polled mode. This example creates a new file on an
* SD card (which is previously formatted with FATFS), write data to the file
* and reads the same data back to verify.
*
* @param	None
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None
*
******************************************************************************/

#define DIR_NAME_FORMAT "0:%d-%d-%d-%dh%dm%ds"
FRESULT Ffs_Init(TCHAR *Path){
	FRESULT Res;

	Time_Data GpsDataFromFpga={0};

	Gps_GetRealTime(&GpsDataFromFpga);

	sprintf(Path, DIR_NAME_FORMAT,
			GpsDataFromFpga.year, GpsDataFromFpga.month,
			GpsDataFromFpga.day, GpsDataFromFpga.hour,
			GpsDataFromFpga.minute, GpsDataFromFpga.second);

	Res = f_mount(&fatfs, Path, 0);
	if (Res != FR_OK) {
		xil_printf("f_mount XST_FAILURE\n");
		return XST_FAILURE;
	}

	Res = f_mkdir(Path);
	if (Res != FR_OK) {
		xil_printf("f_mkdir XST_FAILURE\n");
		xil_printf("%d\n", Res);
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}
#define FILE_NAME_FORMAT "/data%d.xls"
#define BYTES_EACH_LINE 102
#define DATA_OFFSET  28
#define DATA_FORMAT		"%4d/%2d/%2d\t%2d:%2d:%2d:%3d:%3d\t%8d\t%8d\t%8d\t%8d\t%8d\t%8d\t%8d\t%8d\n"
/*
int Ffs_Try(TCHAR *Path){
	unsigned int chanalData[8];
	char formatData[_MAX_LFN]= "0";
    Time_Data  timeData = {0};
    Gps_GetRealTime(&timeData);
	Ffs_FormatData(chanalData, &timeData, formatData);
	Ffs_WriteDataToFileInCorrectPath(Path, formatData);
	return 0;
}
*/
int Ffs_FormatData(unsigned int *ChanalData, Time_Data *timeData, char *formatData){

	sprintf(formatData , DATA_FORMAT,
			timeData->year,timeData->month,timeData->day,
			timeData->hour,timeData->minute,timeData->second,
			timeData->millisec,timeData->microsec,
			ChanalData[0],ChanalData[1],ChanalData[2],ChanalData[3],
			ChanalData[4],ChanalData[5],ChanalData[6],ChanalData[7]);

	return 0;
}

FRESULT Ffs_WriteDataToFileInCorrectPath(TCHAR *Path, char* dataToBeWrite){
	FRESULT Res;
	UINT NumBytesWritten;

	Res = f_write(&fil, dataToBeWrite, DATA_WORDS*4*FIFO_SIZE, &NumBytesWritten);
	if (Res) {
		xil_printf("f_write: %d\r\n", Res);
		return XST_FAILURE;
	}
	f_sync(&fil);
	return XST_SUCCESS;
}

void Ffs_GenerateFullPathName(char* fullPath, char *dirPath, char *fileName){
	strcpy(fullPath, dirPath);
	strcat(fullPath, fileName);
}

FRESULT Ffs_CreateNewFile(int index, TCHAR *Path, TCHAR *filePath){

	char fileName[_MAX_LFN] = "0";
	FRESULT Res;

	sprintf(fileName, FILE_NAME_FORMAT, index);
	strcpy(filePath, Path);
	strcat(filePath, fileName);

	Res = f_open(&fil, filePath, FA_CREATE_ALWAYS |FA_WRITE | FA_READ);
	if (Res) {
		xil_printf("Ffs_CreateNewFile --f_open: %d\r\n", Res);
		return XST_FAILURE;
	}

	xil_printf("Ffs_CreateNewFile%d\r\n", Res);
	return XST_SUCCESS;
}
FRESULT Ffs_CloseFile(TCHAR *filePath){
	FRESULT Res;
	Res = f_close(&fil);
		if (Res) {
			return XST_FAILURE;
	}
	xil_printf("Ffs_CloseFile: XST_SUCCESS\r\n");
	return XST_SUCCESS;
}
void Ffs_CreateFileAndSaveData(Lidar_Data *data,  TCHAR *dirPath){
    static int indexFile = 0;
    static int wrCount = 0;
    TCHAR filePath[_MAX_LFN] = "0";
    if(wrCount == 0 || wrCount == SD_WR_NUM_EACH_FILE){
    	 if(wrCount == SD_WR_NUM_EACH_FILE){
        	 Ffs_CloseFile(filePath);
        	 wrCount = 0;
    	 }
    	 if(wrCount == 0){
           	 Ffs_CreateNewFile(indexFile, dirPath, filePath);
             xil_printf("filePath is: %s  \r\n", filePath);
        	 indexFile++;
    	 }
     }
     Ffs_WriteDataToFileInCorrectPath(filePath, (char *)data);
     wrCount++;
}
