/*
 * tdc.c
 *
 *  Created on: 2016Äê11ÔÂ12ÈÕ
 *      Author: lin.zheng
 */
#include <stdio.h>
#include "platform.h"
#include "sleep.h"
#include "xparameters.h"	/* SDK generated parameters */
#include "xsdps.h"		/* SD device driver */
#include "xil_printf.h"
#include "ff.h"
#include "xil_cache.h"
#include "xplatform_info.h"


#include "tdc.h"
#include "fifo.h"
//#include "SD_Card.h"

//#define FIFO_SIZE 78
extern unsigned int chandata[FIFO_SIZE][8];


//tested.
void TDC_config(void)
{
	TDC_RegConfig(TDC_REG_0, 0x007FC81);
	TDC_RegConfig(TDC_REG_1, 0x0000000);
	TDC_RegConfig(TDC_REG_2, 0x0000002);
	TDC_RegConfig(TDC_REG_3, 0x0000000);
	TDC_RegConfig(TDC_REG_4, 0x6000000);
	TDC_RegConfig(TDC_REG_5, 0x0E004DA | (1<<23) | (1<<21));
	TDC_RegConfig(TDC_REG_6, 0x0000000);
	TDC_RegConfig(TDC_REG_7, 0x0281FB4);
	TDC_RegConfig(TDC_REG_11, 0x7FF0000);
	TDC_RegConfig(TDC_REG_12, 0x0000000);
	TDC_RegConfig(TDC_REG_14, 0x0000000);
	TDC_RegConfig(TDC_REG_4, 0x6400000);
	 //Enable inputs
	return;
}


//tested.
void TDC_resetFifoFullFlag(void){
	MYIMODE_mWriteReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG0_OFFSET , 1<<4|0x0c);
	MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG4_OFFSET);
	MYIMODE_mWriteReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG0_OFFSET , 0x00);
}


//tested.
void TDC_RegConfig(int regNum, int configData){
	 MYIMODE_mWriteReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG4_OFFSET , configData);//WRITE_DATA
	 MYIMODE_mWriteReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG0_OFFSET , 1<<5|regNum);//WRN_SET
	 MYIMODE_mWriteReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG0_OFFSET , 0x00);//WRN_RSET
	 return;
}

//tested.
int TDC_ReadRegData(int regNum){
	int readData = 0;
	MYIMODE_mWriteReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG0_OFFSET , 1<<4|regNum);
	readData= MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG4_OFFSET);
	MYIMODE_mWriteReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG0_OFFSET , 0x00);
	return readData;
}


//tested.
void TDC_CheckIfNeedMasterRest(void){

	static int count = 0;

	if( ++count == 100)
    {
		 TDC_RegConfig(TDC_REG_4, 0x6400000);
     	 count=0;
    }
	return;
}

//tested.
extern  int yearMonthDayMillisec;
extern  int hourMinuteSecondMicrosec;
void TDC_PrintChDatas(unsigned int  (*chandata)[I_MODE_MAX_CH_NUM]){
    int j;
   	for(j=0;j<FIFO_SIZE;j=j+300)
   	{
   		printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\r\n",
   			chandata[j][0],chandata[j][1],
			chandata[j][2],chandata[j][3],
			chandata[j][4],chandata[j][5],
			chandata[j][6],chandata[j][7]);
   	}
   	return;
}

//tested.
TDC_FlagInfo TdcFlagCheck(TDC_FlagInfo tdcFlag){

//	tdcFlag.IrFlag = System_ReadReg(REG_IRFLAG);
//	tdcFlag.ErrFlag = System_ReadReg(REG_ERRFLAG);
//	tdcFlagInfo->EF1 = System_ReadReg(REG_EF1);
//	tdcFlagInfo->EF2 = System_ReadReg(REG_EF2);

//--------------------------  QUESTION!  ------------------------------
	tdcFlag.IrFlag = MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG8_OFFSET);
	tdcFlag.ErrFlag= MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG12_OFFSET);
	tdcFlag.EF1 = MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG5_OFFSET);
	tdcFlag.EF2 = MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG6_OFFSET);

	if(tdcFlag.IrFlag)
	{
		printf("interrupt\n\r");
	}
	if(tdcFlag.ErrFlag)
	{
		printf("error\n\r");
	}

	return tdcFlag;
}

void TDC_FlagCheck1(TDC_FlagInfo *tdcFlag){
	tdcFlag->IrFlag = MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG8_OFFSET);
	tdcFlag->ErrFlag= MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG12_OFFSET);
	tdcFlag->EF1 = MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG5_OFFSET);
	tdcFlag->EF2 = MYIMODE_mReadReg(TDC_BASEADDR,  MYIMODE_S00_AXI_SLV_REG6_OFFSET);

	if(tdcFlag->IrFlag)
	{
		printf("interrupt\n\r");
	}
	if(tdcFlag->ErrFlag)
	{
		printf("error\n\r");
	}
	return;
}

//tested.
void TDC_setChData(int channel, int chRecvFlag, int time, unsigned int triTimes, unsigned int (*chandata)[I_MODE_MAX_CH_NUM]){
	if(((chRecvFlag>>(channel-1))&1)|(time>121500))
		chandata[triTimes][channel-1]=-1;
	else
		chandata[triTimes][channel-1]=time;
	return;
}

void TdcAndGps_PrintChDatas(unsigned int  (*chandata1)[I_MODE_MAX_CH_NUM], Time_Data *timeData){
    int j;
   	for(j=0;j<FIFO_SIZE;j=j+300)
   	{
   		GPS_timeDataDecode(&timeData[j]);
   		GPS_printTime(&timeData[j]);
   		printf("Chanal Data: %d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\r\n",
   			chandata1[j][0],chandata1[j][1],
			chandata1[j][2],chandata1[j][3],
			chandata1[j][4],chandata1[j][5],
			chandata1[j][6],chandata1[j][7]);
   	}
   	return;
}
